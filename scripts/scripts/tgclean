#!/usr/bin/env python3
"""
Terraform/Terragrunt cleanup script
Recursively finds and deletes .terraform and .terragrunt-cache directories
"""

import sys
import shutil
from pathlib import Path


def main():
    target_dir = Path(sys.argv[1]).resolve() if len(
        sys.argv) > 1 else Path.cwd()

    if not target_dir.is_dir():
        print(f"\033[91mError: Directory '{
              target_dir}' does not exist\033[0m", file=sys.stderr)
        sys.exit(1)

    # Find all directories
    all_dirs = set()
    for name in ['.terraform', '.terragrunt-cache']:
        all_dirs.update(p.resolve()
                        for p in target_dir.rglob(name) if p.is_dir())

    if not all_dirs:
        print("\033[93mNo .terraform or .terragrunt-cache directories found\033[0m")
        return

    # Remove nested .terraform directories
    terragrunt_dirs = {d for d in all_dirs if d.name == '.terragrunt-cache'}
    dirs_to_delete = {d for d in all_dirs if d.name == '.terragrunt-cache' or
                      not any(tg in d.parents for tg in terragrunt_dirs)}

    # Display and confirm
    sorted_dirs = sorted(dirs_to_delete)
    print(f"Found {len(sorted_dirs)} directories to delete:")
    for i, dir_path in enumerate(sorted_dirs, 1):
        relative_path = dir_path.relative_to(target_dir)
        print(f"  {i:2d}. {relative_path}")

    try:
        confirm = input(
            f"\nDelete all {len(sorted_dirs)} directories? [y/N]: ").strip().lower()
    except KeyboardInterrupt:
        print("\n\033[91mOperation cancelled\033[0m")
        return

    if confirm not in ['y', 'yes', 'Y']:
        print("\033[91mOperation cancelled\033[0m")
        return

    # Delete directories
    success_count = 0
    for dir_path in sorted_dirs:
        try:
            print(f"\033[94mDeleting: {dir_path}\033[0m")
            shutil.rmtree(dir_path)
            success_count += 1
        except Exception as e:
            print(f"\033[91m  âœ— Failed to delete: {e}\033[0m")

    print(f"\n\033[92mCleanup complete! Successfully deleted {
          success_count}/{len(sorted_dirs)} directories\033[0m")


if __name__ == "__main__":
    main()
