#+TITLE: Emacs configuration file
#+AUTHOR: Valentin Nemirovsky
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Config

** Meta

*** GC
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
(setq gc-cons-threshold (* 50 1000 1000))
#+END_SRC

*** Packages

Initialize package and add Melpa source.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		   (not (gnutls-available-p))))
      (proto (if no-ssl "http" "https")))

      (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
      ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )

  ;; Load custom packages manually
  (add-to-list 'load-path "~/.emacs.d/my-packages/sxhkd-mode")

  (setq package-list '(terraform-mode doom-themes dotenv-mode rainbow-mode sudo-edit iedit hungry-delete epc concurrent ctable goto-line-preview ample-theme soothe-theme darktooth-theme cyberpunk-theme material-theme gruvbox-theme autothemer all-the-icons company counsel dap-mode flycheck haskell-mode helm json-snatcher lsp-metals lsp-mode lsp-treemacs lsp-ui magit markdown-mode posframe projectile smartparens treemacs typescript-mode web-mode which-key with-editor zenburn-theme all-the-icons cargo company-racer counsel deadgrep deferred dockerfile-mode eldoc company emmet-mode expand-region fish-mode flx-ido flx flycheck-rust groovy-mode haskell-mode helm helm-core highlight-indentation ido-vertical-mode ivy-rich js2-refactor json-mode json-reformat json-snatcher dap-mode bui lsp-treemacs lsp-ui lsp-mode dash-functional magit git-commit markdown-mode memoize multiple-cursors org-bullets php-mode popup posframe prettier-js projectile racer pos-tip reformatter rjsx-mode rust-mode sass-mode haml-mode sbt-mode scala-mode shackle smartparens spinner swiper ivy tide flycheck pkg-info epl toml-mode transient treemacs ht hydra lv pfuture ace-window avy f s dash typescript-mode undo-fu use-package bind-key web-mode which-key with-editor async xref-js2 js2-mode yaml-mode yasnippet zenburn-theme))

  ;; Activate all the packages
  (package-initialize)

  ;; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  ;; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

Install use-package.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))
(setq use-package-always-ensure t)

;; this package is useful for overriding major mode keybindings
(use-package bind-key)
#+END_SRC

** General

/Emacs-server on first start/
#+BEGIN_SRC emacs-lisp
; TODO start the sever as daemon using systemd on linux instead
(require 'server)
(unless (server-running-p)
    (server-start))
#+END_SRC

/Stop backups and autosaves/
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
(setq create-lockfiles nil)  ; stop creating .# files
#+END_SRC

/Revert (update) buffers automatically when underlying files are changed externally./
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

/Misc/
#+BEGIN_SRC emacs-lisp
;; remove disabled command pop-up
(setq disabled-command-hook nil)

;; Sort apropos by relevance
(setq apropos-sort-by-scores t)

(use-package hungry-delete
  :config
  (global-hungry-delete-mode))
#+END_SRC

** Commands

/Handy kill all buffers command/
#+BEGIN_SRC emacs-lisp
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC

/Vertical and horizontal split last buffer
#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

/Smart open line with indentation of current mode/
#+BEGIN_SRC emacs-lisp
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))
#+END_SRC

/ivy-switch-buffer with buffer icons/
#+BEGIN_SRC emacs-lisp
(defun ivy-rich-switch-buffer-icon (candidate)
     (with-current-buffer
   	  (get-buffer candidate)
	(let ((icon (all-the-icons-icon-for-mode major-mode)))
	  (if (symbolp icon)
	      (all-the-icons-icon-for-mode 'fundamental-mode)
	    icon))))
#+END_SRC

/Navigate to git projects with =s-P=/
#+BEGIN_SRC emacs-lisp
(defun magit-status-with-prefix-arg ()
  "Call `magit-status` with a prefix."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'magit-status)))
#+END_SRC

** Key mappings

*** General

Just some general key map
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "s-p"))                          ;; unset the default print
(global-set-key (kbd "s-o") 'ace-window)                ;; switch window
(global-set-key (kbd "s-<") 'previous-buffer)           ;; move back to previous buffer
(global-set-key (kbd "s->") 'next-buffer)               ;; move forward to next buffer
(global-set-key (kbd "s-S") 'write-file)                ;; save as
(global-set-key (kbd "s-<backspace>") 'kill-whole-line) ;; kill line;;(global-set-key (kbd "s-T") 'vsplit-last-buffer)        ;; vertical split last buffer
;;(global-set-key (kbd "s-t") 'hsplit-last-buffer)        ;; horizontal split last buffer
;;(global-set-key (kbd "s-<return>") 'smart-open-line)
;;(global-set-key (kbd "s-S-<return>") 'smart-open-line-above)

(global-set-key "\C-c\C-d" "\C-a\C- \C-n\M-w\C-y")      ;; "C-c C-d" to duplicate line
(global-set-key (kbd "C-/") 'comment-line)              ;; comment line
(global-set-key (kbd "C-x f") 'find-file)               ;; C-x C-f remapped to projectile-find-file

(global-set-key [M-down] 'move-text-down)               ;; mode text down
(global-set-key [M-up] 'move-text-up)                   ;; mode text up
(global-set-key (kbd "M-a") 'mark-whole-buffer)         ;; select whole buffer
(global-set-key (kbd "M-s") 'save-buffer)               ;; save
(global-set-key (kbd "M-q") 'save-buffers-kill-emacs)   ;; save buffers and quit
(global-set-key (kbd "M-C-k") 'kill-this-buffer)          ;; kill this buffer
(global-set-key (kbd "M-u") 'upcase-dwim)               ;; upcase word or marked region
(global-set-key (kbd "M-0") (lambda ()
                              (interactive)
                              (if (string= (buffer-name) "*scratch*") (previous-buffer) (switch-to-buffer "*scratch*"))))
(global-set-key [remap goto-line] 'goto-line-preview) ;; remap goto-line to the preview version
#+END_SRC

**** Macros
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Tools

**** sudo-edit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-r") 'sudo-edit)
#+END_SRC

**** projectile
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c p") 'projectile-switch-project)
(global-set-key (kbd "C-x C-f") 'projectile-find-file)
#+END_SRC

**** smartparens
#+BEGIN_SRC emacs-lisp
;;(bind-keys
;;  :map smartparens-mode-map
;;  ("C-M-a" . 'sp-beginning-ofsexp)
;;  ("C-M-e" . 'sp-end-of-sexp)
;;  ("C-M-e" . 'sp-kill-sexp)
;;  ("C-M-<down>" . 'sp-down-sexp)
;;  ("C-M-<up>" . 'sp-up-sexp)
;;  ("C-M-<right>" . 'sp-forward-sexp)
;;  ("C-M-<left>" . 'sp-backward-sexp))
#+END_SRC

**** treemacs
#+BEGIN_SRC emacs-lisp
(bind-keys
  :map global-map
  ("M-C-0"     . treemacs-select-window)
  ("C-x t 1"   . treemacs-delete-other-windows)
  ("C-x t t"   . treemacs)
  ("C-x t B"   . treemacs-bookmark)
  ("C-x t C-t" . treemacs-find-file)
  ("C-x t M-t" . treemacs-find-tag))
#+END_SRC

**** multiple cursors
#+BEGIN_SRC emacs-lisp
(setq mc/always-run-for-all 1)
(global-set-key (kbd "C-s-c C-s-c") 'mc/edit-lines)
(global-set-key (kbd "M-d") 'mc/mark-next-like-this)
;(global-set-key (kbd "M-D") 'mc/mark-all-dwim)
;(define-key mc/keymap (kbd "<return>") nil)
#+END_SRC

**** ivy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-C-b") 'ivy-switch-buffer)
#+END_SRC

**** ivy-rich
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package ivy-rich
  :config
  (ivy-rich-mode 1)
  (setq ivy-rich-path-style 'abbrev)          ;; To abbreviate paths using abbreviate-file-name
  (setq ivy-rich--display-transformers-list   ;; Buffer icons in switch buffer
      '(ivy-switch-buffer
        (:columns
         ((ivy-rich-switch-buffer-icon (:width 2))
          (ivy-rich-candidate (:width 30))
          (ivy-rich-switch-buffer-size (:width 7))
          (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
          (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
          (ivy-rich-switch-buffer-project (:width 15 :face success))
          (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
         :predicate
         (lambda (cand) (get-buffer cand))))))
#+END_SRC

**** swiper
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper-isearch)
#+END_SRC

**** magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-P") 'magit-status-with-prefix-arg)
#+END_SRC

**** counsel
#+BEGIN_SRC emacs-lisp
;;(global-unset-key (kbd "M-m"))

(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "M-m") 'counsel-kmacro)
(global-set-key (kbd "s-m") 'counsel-kmacro)
(global-set-key (kbd "C-o") 'counsel-find-file) ;; Need to change this as it is assigned to projectile
(global-set-key (kbd "s-f") 'counsel-rg)        ;; ??
(global-set-key (kbd "s-p") 'counsel-git)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;; (global-set-key (kbd "<f1> l") 'counsel-load-library)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
#+END_SRC

**** undo-fu
#+BEGIN_SRC emacs-lisp
(use-package undo-fu)
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z") 'undo-fu-only-undo)
(global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
#+END_SRC

**** emmet-expand
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-j"))
(global-set-key (kbd "C-j") 'emmet-expand-line)
#+END_SRC

**** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (global-set-key (kbd "M-m") 'er/expand-region)
  (global-set-key (kbd "M-/") 'er/contract-region))
#+END_SRC

*** Mac stuff
#+BEGIN_SRC emacs-lisp
(setq mac-right-command-modifier 'super) ;; right command as super
(setq mac-option-modifier 'super) ;; left alt as super
(setq mac-command-modifier 'meta) ;; left command as meta
(setq mac-right-option-modifier 'nil) ;; use right alt to enter symbols
#+END_SRC

** Modes

*** IDO
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
  (ido-vertical-mode 1)
  (ido-everywhere 1)
  (setq ido-enable-flex-matching t
        ido-use-faces nil
        ido-vertical-define-keys 'C-n-and-C-p-only)
(flx-ido-mode 1)
#+END_SRC

*** Company mode

#+BEGIN_SRC emacs-lisp
(use-package company
  :hook
  (scala-mode . company-mode)
  (scala-mode . yas-minor-mode)
  :config
  (setq lsp-completion-provider :capf)
  (setq company-idle-delay 0.1)
  (setq company-global-modes '(not org-mode markdown-mode))
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t))  ;; aligns annotation to the right hand side
(global-company-mode)

(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-racer)
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC

*** Markdown mode
#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode" "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC

*** Fish mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '(cons (format "^%s/scripts/" (getenv "HOME")) 'fish-mode))
(add-to-list 'auto-mode-alist '(cons (format "^%s/\\.config/fish/" (getenv "HOME")) 'fish-mode))
#+END_SRC

*** Scala
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :mode "\\.s\\(cala\\|bt\\)$")
#+END_SRC
*** SBT mode
#+BEGIN_SRC emacs-lisp
(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+END_SRC
*** Rust mode
#+BEGIN_SRC emacs-lisp
(use-package toml-mode)
(use-package rust-mode
  :hook (rust-mode . lsp))
(use-package cargo
  :hook (rust-mode . cargo-minor-mode))
(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
(use-package racer
  :hook ((rust-mode . racer-mode)
         (rust-mode . eldoc-mode))
  :init
  (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library"))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** LSP mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
;;  :init (setq lsp-metals-server-command "/usr/valle/.local/share/coursier/bin/metals")
  :hook (scala-mode . lsp)
  :commands lsp
  :config (setq lsp-prefer-flymake nil))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

*** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yml\\'" . yaml-mode)
         ("\\.yaml\\'" . yaml-mode)))
#+END_SRC

*** Highlight indentation
#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :config (set-face-background 'highlight-indentation-current-column-face "#6e6a6a")
  :hook (yaml-mode . highlight-indentation-current-column-mode))
#+END_SRC

*** Web config

**** Json mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode ("\\.json\\'"))
#+END_SRC
**** web mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'")
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t))


#+END_SRC

**** Emmet mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :hook ((web-mode . emmet-mode)
         (rjsx-mode . emmet-mode)
         (css-mode . emmet-mode))
  :config
  (setq emmet-self-closing-tag-style " /") ;; default "/"
  (setq emmet-expand-jsx-className? t)       ;; default nil expands "className=" instead of "class="
)

#+END_SRC

**** RJSX mode
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode ("\\.[tj]s[x]?\\'")
  :config
  (setq js-indent-level 2))
#+END_SRC

**** Tide
#+BEGIN_SRC emacs-lisp

;; tide def func
(defun tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)
    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (setq lsp-eslint-server-command '("node" (concat (getenv "HOME") "/var/src/vscode-eslint/server/out/eslintServer.js") "--stdio"))
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet)
           (company-dabbrev-code company-dabbrev))))
;; hooks
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'rjsx-mode-hook 'tide-setup-hook)
(add-hook 'web-mode-hook 'tide-setup-hook)
;;
(use-package tide
  :after (rjsx-mode company flycheck)
  :hook ((rjsx-mode . tide-setup)
         (rjsx-mode . tide-hl-identifier-mode)))
#+END_SRC

**** Prettier
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :after (rjsx-mode)
  :hook (rjsx-mode . prettier-js-mode))
#+END_SRC

*** iedit-mode
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :config (global-set-key (kbd "C-;") 'iedit-mode)) ;; C-; to edit, C-; to exit
#+END_SRC

*** dotenv-mode

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode))
#+END_SRC

*** terraform-mode

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tf\\'" . terraform-mode))
#+END_SRC

*** sxhkd-mode
#+BEGIN_SRC emacs-lisp
  (require 'sxhkd-mode)
  (add-to-list 'auto-mode-alist `(,(rx "sxhkdrc" string-end) . sxhkd-mode))
#+END_SRC


** Tools

*** smarparens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  ;; (require 'smartparens-config)

  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (setq sp-show-pair-delay 0)

  ;; no '' pair in emacs-lisp-mode
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+END_SRC

*** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-index-method 'alien
        projectile-enable-caching t
        projectile-project-search-path '("~/scripts" "~/omegapoint/uppdrag/sartorius/dev/" "~/dev/" "~/.emacs.d" "~/omegapoint" "~/Dropbox")
        projectile-completion-system 'ivy
        projectile-sort-order 'modification-time)
  (projectile-global-mode))
;; (M-x projectile-invalidate-cache) to refresh projectile after moving files
#+END_SRC

*** treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  :config
  (progn
    (setq treemacs-position 'left
          treemacs-width 25)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))))
#+END_SRC

*** helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
;;(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** use-package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

*** hippie-expand
#+BEGIN_SRC emacs-lisp
(global-set-key "\M- " 'hippie-expand)
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))
#+END_SRC

*** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (setq magit-repository-directories '(("~/dev" . 4)))
  (setq git-commit-summary-max-length 50))
#+END_SRC

*** avy
First letter search tool (=s-.=)
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("s-." . avy-goto-word-or-subword-1))
  :config
  (setq avy-background t))
;;  (avy-keys
;;      (nconc (number-sequence ?a ?z)
;;             (number-sequence ?A ?Z)
;;             (number-sequence ?1 ?9)
;;             '(?0)))
#+END_SRC

*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (swiper-isearch . ivy--regex-plus)
        (counsel-rg . ivy--regex-plus)
        (t      . ivy--regex-fuzzy))))   ;; enable fuzzy searching everywhere except for Swiper and ag
#+END_SRC

*** counsel
#+BEGIN_SRC emacs-lisp
;; When using git ls (via counsel-git), include unstaged files
(setq counsel-git-cmd "git ls-files --full-name --exclude-standard --others --cached --")
#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+END_SRC

*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+END_SRC

*** shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :init
  (setq shackle-default-alignment 'below
        shackle-default-size 0.4
        shackle-rules '((help-mode           :align below :select t)
                        (helpful-mode        :align below)
                        (compilation-mode    :select t   :size 0.25)
                        ("*xref*"            :select t   :size 0.35)
                        ("*compilation*"     :select nil :size 0.25)
                        ("*ag search*"       :select nil :size 0.25)
                        ("*Flycheck errors*" :select nil :size 0.25)
                        ("*Warnings*"        :select nil :size 0.25)
                        ("*Error*"           :select nil :size 0.25)
                        ("*Org Links*"       :select nil :size 0.1)
                        (magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)
                        (magit-log-mode                   :same t                  :inhibit-window-quit t)
                        (magit-commit-mode                :ignore t)
                        (magit-diff-mode     :select nil  :align left   :size 0.5)
                        (git-commit-mode                  :same t)
                        (vc-annotate-mode                 :same t)
                        ))
  :config
  (shackle-mode 1))
#+END_SRC

*** deadgrep
#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :bind (("C-c d g" . deadgrep))
  :config
  (setq-default deadgrep--search-type 'regexp)

  (defun valle/deadgrep--jump-to-and-execute (re)
    "Execute the button that matches RE and push it."
    (goto-char (point-min))
    (re-search-forward re)
    (backward-char 3)
    (push-button))

  (defun valle/deadgrep-change-search-term ()
    "Change the search term."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Search term: .*change$"))

  (defun valle/deadgrep-change-search-type-to-string ()
    "Change the search type to 'string'."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Search type: .*string"))

  (defun valle/deadgrep-change-search-type-to-regexp ()
    "Change the search type to 'regexp'."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Search type: .*regexp"))

  (defun valle/deadgrep-change-case-to-ignore ()
    "Change the case sensitivity to 'ignore'."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Case: .*ignore"))

  (defun valle/deadgrep-change-directory ()
    "Change the root directory for searches."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Directory: .*$"))

  (defun valle/deadgrep-search-all-files ()
    "Change file search scope to 'all'."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Files: .*all"))

  (defun valle/deadgrep-search-files-by-type ()
    "Search only in the specified file types."
    (interactive)
    (valle/deadgrep--jump-to-and-execute "^Files: .*type"))

  (bind-keys
   :map deadgrep-mode-map
   ("s" . valle/deadgrep-change-search-term)
   ("ts" . valle/deadgrep-change-search-type-to-string)
   ("tr" . valle/deadgrep-change-search-type-to-regexp)
   ("ci" . valle/deadgrep-change-case-to-ignore)
   ("d" . valle/deadgrep-change-directory)
   ("fa" . valle/deadgrep-search-all-files)
   ("ft" . valle/deadgrep-search-files-by-type)))
#+END_SRC

** Styling

/Theme/
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  (setq doom-themes-treemacs-theme "doom-atom")
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  )
;;(use-package darktooth-theme
;;  :config
;;  (load-theme 'darktooth t)
;;  (darktooth-modeline-two))
;; (use-package zenburn-theme
;;   :config (load-theme 'zenburn t))
#+END_SRC

/General stuff/
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)                  ;; remove menubar
(tool-bar-mode -1)                  ;; remove toolbar
(scroll-bar-mode -1)                ;; remove scrollbar
(blink-cursor-mode 0)               ;; disable blinking cursor
(fset 'yes-or-no-p 'y-or-n-p)       ;; y and n instead of yes and no everywhere else
(delete-selection-mode 1)
(global-visual-line-mode t)
(global-hl-line-mode t)
(global-display-line-numbers-mode)

(setq
 inhibit-startup-message t         ; Don't show the startup message
 inhibit-startup-screen t          ; or screen
 cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
 echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffer
 initial-scratch-message nil       ; Empty scratch buffer
 sentence-end-double-space nil     ; Sentences should end in one space, come on!
 confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
 ns-pop-up-frames nil              ; always open files in the same fram, even when double-clicked
)

(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))

(setq-default frame-title-format "%b (%f)") ;; show full path in the title bar

(use-package rainbow-mode
  :init (rainbow-mode 1))
#+END_SRC

/Fonts/
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "SauceCodePro Nerd Font 14")
(setq-default line-spacing 0)
#+END_SRC

/Windows/
M-x follow-mode -- synchronizes several windows on the same buffer to display adjacent sections
M-x scroll-all-mode -- scrolling commands and point motion command apply to every window
#+BEGIN_SRC emacs-lisp
(winner-mode 1)                    ; C-c left to undo, C-c right to redo last window setup
#+END_SRC

/Tabs and indentation/
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq default-tab-width 2
      tab-width 2
      show-paren-style 'expression)
#+END_SRC

/Matching parenthesis appearance/

#+BEGIN_SRC emacs-lisp
(set-face-background 'show-paren-match "#994C00")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode)
#+END_SRC

/Delete trailing spaces and add new line in the end of a file save/
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
#+END_SRC

* Org
Auto set .org files to org mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+END_SRC

** Visual
Visually indent sections. This looks better for smaller files. Also, disallow editing invisible areas and show any number of empty lines in collapsed state. And

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t) ;; Visually indent sections
(setq org-catch-invisible-edits 'error) ;; Disallow editing invisible areas
(setq org-cycle-separator-lines -1) ;; show any number of empty line in collapsed state
(setq calendar-week-start-day 1)
(setq org-ellipsis "⤵") ;; use =⤵= instead of =...= for wrapped sections

(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Backup // Add dropbox to OP-pegasus
Org directory is under version control regularly backed up also add device specific org files to the agenda list

#+BEGIN_SRC emacs-lisp
(setq org-directory "/home/valle/Dropbox/org")
(setq org-agenda-files (list "/home/valle/Dropbox/org/home.org"
                             "/home/valle/omegapoint/org/work.org"))
#+END_SRC

** Other

Custom source block templates (e.g. =<el= for emacs lisp).

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp \n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist '("eq" "\\begin{equation}\n?\n\\end{equation}"))
  (define-key org-mode-map (kbd "C-'") nil))
#+END_SRC

And inside those code blocks indentation should be correct depending on the source language used and have code highlighting.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+END_SRC

Quickly open todo and config files.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "\e\ec") (lambda () (interactive) (find-file "~/.emacs.d/settings.org")))
;;(global-set-key (kbd "\e\em") (lambda () (interactive) (find-file "/Users/valle/Documents/Org/main.org")))
#+END_SRC

Search in all org files

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "\e\ef") (lambda () (interactive) (counsel-rg nil org-directory)))
#+END_SRC

** Key mappings

Org store linkm capture and agenda

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

* Customizations

Store cusom-file separetely

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC

** Fancy lambdas
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

* Stash
/Separate emacs kill ring from the general system clipboard completely
#+BEGIN_SRC emacs-lisp
;;(use-package simpleclip
;;  :config
;;  (simpleclip-mode 1))
#+end_src

/put all backup files into ~/.emacs.d/backups//
#+begin_src emacs-lisp
;;(setq
;;   backup-by-copying t
;;   backup-directory-alist '(("." . "~/.emacs.d/backups"))
;;   delete-old-versions t
;;   kept-new-versions 6
;;   kept-old-versions 2
;;   version-control t)
#+END_SRC
